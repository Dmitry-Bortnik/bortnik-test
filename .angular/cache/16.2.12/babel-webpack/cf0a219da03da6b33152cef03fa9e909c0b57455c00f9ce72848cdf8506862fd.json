{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCommonModule } from '@angular/material/core';\nimport { AddEditUserComponent } from './add-edit-user/add-edit-user.component';\nimport { ConfimDeleteComponent } from 'src/app/dialogs/confim-delete/confim-delete.component';\nimport { BehaviorSubject, ReplaySubject, Subject, catchError, map, of, switchMap, takeUntil } from 'rxjs';\nimport { TableUsersComponent } from './table-users/table-users.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/local-storage.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"src/app/services/api-service\";\nimport * as i4 from \"@angular/common\";\nfunction MainComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"app-table-users\", 8);\n    i0.ɵɵlistener(\"edit\", function MainComponent_ng_container_9_Template_app_table_users_edit_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onEdit($event));\n    })(\"selectedUsersChange\", function MainComponent_ng_container_9_Template_app_table_users_selectedUsersChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onSelectedUsersChange($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const users_r1 = ctx.ngIf;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dataSource\", users_r1)(\"selectedUsers\", ctx_r0.selectedUsers);\n  }\n}\nexport let MainComponent = /*#__PURE__*/(() => {\n  class MainComponent {\n    constructor(localStorageService, dialog, cdr, apiService) {\n      this.localStorageService = localStorageService;\n      this.dialog = dialog;\n      this.cdr = cdr;\n      this.apiService = apiService;\n      this.fetchData$ = new ReplaySubject();\n      this.columns$ = new BehaviorSubject([]);\n      this.loading$ = new BehaviorSubject(true);\n      this.users$ = new BehaviorSubject(null);\n      this.destroy$ = new Subject();\n      this.selectedUsers = [];\n      this.isAnyUserSelected = (selectedUsers, users) => {\n        const localSelectedUsers = this.getLocalSelectedUsers(users ?? [], selectedUsers);\n        return localSelectedUsers.length > 0;\n      };\n      this.onEdit = user => {\n        console.log(user);\n        const dialogRef = this.dialog.open(AddEditUserComponent, {\n          panelClass: ['dialog-main'],\n          width: '100%',\n          maxWidth: '448px',\n          autoFocus: false,\n          data: {\n            user: user,\n            title: 'Редактирование'\n          }\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          if (result?.edit) {\n            const updatedUser = result.edit;\n            let currentUsers = this.users$.getValue() ?? [];\n            currentUsers = currentUsers.map(u => u.email === updatedUser.email ? updatedUser : u);\n            this.localStorageService.setUsers(currentUsers);\n            this.users$.next(currentUsers);\n          }\n        });\n      };\n      this.onDelete = () => {\n        const selectedCount = this.selectedUsers.length;\n        const dialogRef = this.dialog.open(ConfimDeleteComponent, {\n          panelClass: ['dialog-main', 'delete-dialog'],\n          width: '100%',\n          maxWidth: '448px',\n          minHeight: '300px',\n          data: {\n            dialogTitle: 'Удаление строк',\n            info: `Удалить выбранные строки (${selectedCount})?`\n          }\n        });\n        dialogRef.afterClosed().subscribe(result => {\n          if (result) {\n            this.deleteUsers(this.selectedUsers);\n          }\n        });\n      };\n    }\n    ngOnInit() {\n      this.initTable();\n      const cachedUsers = this.localStorageService.getUsers();\n      if (cachedUsers) {\n        this.users$.next(cachedUsers);\n        this.loading$.next(false);\n      } else {\n        this.fetchData$.next();\n      }\n      this.fetchData$.pipe(map(() => {\n        this.loading$.next(true);\n      }), switchMap(() => this.apiService.getClients().pipe(catchError(() => of(null)))), takeUntil(this.destroy$)).subscribe(res => {\n        this.loading$.next(false);\n        this.users$.next(res?.users || null);\n        this.localStorageService.setUsers(res.users);\n      });\n    }\n    // select\n    onSelectedUsersChange(selectedUsers) {\n      this.selectedUsers = selectedUsers;\n    }\n    onSelectAll() {\n      const users = this.users$.getValue() ?? [];\n      const localSelectedUsers = this.getLocalSelectedUsers(users, this.selectedUsers);\n      if (localSelectedUsers.length) {\n        const set = new Set(users.map(user => user.email ?? 0));\n        const result = this.selectedUsers.filter(user => !set.has(user.email ?? 0));\n        this.selectedUsers = result;\n        return;\n      }\n      const result = [...this.selectedUsers, ...users];\n      this.selectedUsers = result;\n    }\n    getLocalSelectedUsers(users, selectedUsers) {\n      const set = new Set(users.map(message => message.email ?? 0));\n      return selectedUsers.filter(user => set.has(user.email ?? 0));\n    }\n    //\n    onAdd() {\n      const dialogRef = this.dialog.open(AddEditUserComponent, {\n        panelClass: ['dialog-main'],\n        width: '100%',\n        maxWidth: '448px',\n        autoFocus: false,\n        data: {\n          title: 'Новый клиент'\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result?.add) {\n          const newUser = result.add;\n          const currentUsers = this.localStorageService.getUsers() || [];\n          currentUsers.push(newUser);\n          this.localStorageService.setUsers(currentUsers);\n          this.users$.next(currentUsers);\n        }\n      });\n    }\n    deleteUsers(users) {\n      let currentUsers = this.users$.getValue() ?? [];\n      const emailsToDelete = new Set(users.map(user => user.email));\n      currentUsers = currentUsers.filter(user => !emailsToDelete.has(user.email));\n      this.localStorageService.setUsers(currentUsers);\n      this.users$.next(currentUsers);\n      this.selectedUsers = [];\n    }\n    initTable() {\n      this.columns$.next([{\n        key: 'name',\n        label: 'Имя'\n      }, {\n        key: 'surname',\n        label: 'Фамилия'\n      }, {\n        key: 'email',\n        label: 'E-mail'\n      }, {\n        key: 'phone',\n        label: 'Телефон'\n      }]);\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    static #_ = this.ɵfac = function MainComponent_Factory(t) {\n      return new (t || MainComponent)(i0.ɵɵdirectiveInject(i1.LocalStorageService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.ApiService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MainComponent,\n      selectors: [[\"app-main\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 11,\n      vars: 4,\n      consts: [[1, \"wrapper\"], [1, \"grid\"], [1, \"grid-controls\"], [1, \"btn\", 3, \"click\"], [1, \"icon-add\"], [1, \"btn\", 3, \"disabled\", \"click\"], [1, \"icon-delete\"], [4, \"ngIf\"], [3, \"dataSource\", \"selectedUsers\", \"edit\", \"selectedUsersChange\"]],\n      template: function MainComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n          i0.ɵɵtext(2, \"\\u041A\\u043B\\u0438\\u0435\\u043D\\u0442\\u044B\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function MainComponent_Template_button_click_5_listener() {\n            return ctx.onAdd();\n          });\n          i0.ɵɵelement(6, \"span\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function MainComponent_Template_button_click_7_listener() {\n            return ctx.onDelete();\n          });\n          i0.ɵɵelement(8, \"span\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(9, MainComponent_ng_container_9_Template, 2, 2, \"ng-container\", 7);\n          i0.ɵɵpipe(10, \"async\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"disabled\", !ctx.selectedUsers.length);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 2, ctx.users$));\n        }\n      },\n      dependencies: [CommonModule, i4.NgIf, i4.AsyncPipe, MatTableModule, MatButtonModule, MatMenuModule, MatDialogModule, MatIconModule, MatCommonModule, TableUsersComponent],\n      styles: [\"[_nghost-%COMP%]   h1[_ngcontent-%COMP%]{margin:30px 0 26px;color:#2f7fd5;font-weight:500;font-size:28px}[_nghost-%COMP%]   .grid[_ngcontent-%COMP%]{background:#fff;border-radius:12px;overflow:hidden}[_nghost-%COMP%]   .grid-controls[_ngcontent-%COMP%]{padding:10px 15px;display:flex;align-items:center;gap:8px}\"],\n      changeDetection: 0\n    });\n  }\n  return MainComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}